const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/questionQuery-D67Y8dOg.js","assets/index-BuxX1puY.js","assets/index-CTUkJTRN.css"])))=>i.map(i=>d[i]);
import{a6 as a,A as p,B as u}from"./index-BuxX1puY.js";async function c(o){try{const t=p("authToken");if(!t)throw new Error("未找到认证token");const r=await u.get(`http://localhost:8081/model/search/${o}`,{headers:{Authorization:`Bearer ${t}`}});return console.log(`API response for model ${o}:`,r.data),r.data&&r.data.modelId?r.data:(console.warn(`No valid data returned for model ${o}`),null)}catch(t){return console.error("获取问卷模版失败:",t),null}}async function g(o){if(!o||o.length===0)return[];try{const t=[],r=o.map(e=>c(e));return(await Promise.all(r)).forEach(e=>{e&&t.push(e)}),t}catch(t){throw console.error("批量获取问卷模版失败:",t),t}}async function y(o){try{if(!o||o.trim()==="")return[];const t=JSON.parse(o);if(!Array.isArray(t))return[];if(t.length>0){const r=t[0];if(typeof r=="string"){console.log("检测到问题ID数组格式，需要通过API获取问题数据");const{getQuestionsByIds:n}=await a(async()=>{const{getQuestionsByIds:s}=await import("./questionQuery-D67Y8dOg.js");return{getQuestionsByIds:s}},__vite__mapDeps([0,1,2]));return(await n(t)).map(s=>({id:String(s.questionId||Math.random()),type:String(s.questionType||"text"),title:String(s.questionTitle||"未命名问题"),description:String(s.questionTxt||""),shared:Number(s.shared||0),options:s.questionOptions?typeof s.questionOptions=="string"?JSON.parse(s.questionOptions):s.questionOptions:[]}))}else if(typeof r=="object"&&r!==null)return console.log("检测到问题对象数组格式，直接解析"),t.map(n=>({id:String(n.id||n.questionId||Math.random()),type:String(n.type||n.questionType||"text"),title:String(n.title||n.questionTitle||"未命名问题"),description:String(n.description||n.questionTxt||""),shared:Number(n.shared||0),options:Array.isArray(n.options)?n.options.map(String):n.questionOptions?typeof n.questionOptions=="string"?JSON.parse(n.questionOptions):n.questionOptions:[]}))}return[]}catch(t){return console.error("解析问题数组失败:",t),[]}}function l(o){try{if(!o||o.trim()==="")return[];const t=JSON.parse(o);return Array.isArray(t)?t.length>0&&typeof t[0]=="string"?t.map((r,n)=>({id:r,type:"text",title:`问题 ${n+1}（加载中...）`,description:"正在加载问题详情...",options:[]})):t.map(r=>({id:String(r.id||r.questionId||Math.random()),type:String(r.type||r.questionType||"text"),title:String(r.title||r.questionTitle||"未命名问题"),description:String(r.description||r.questionTxt||""),options:Array.isArray(r.options)?r.options.map(String):[]})):[]}catch(t){return console.warn("同步解析问题数组失败:",t),[]}}function h(o){const t=o.length;let r=0;o.forEach(e=>{const i=l(e.questionsArray);r+=i.length});const n=t>0?Math.round(r/t):0;return{totalModels:t,totalQuestions:r,avgQuestionsPerModel:n}}export{g as a,l as b,c,h as g,y as p};
